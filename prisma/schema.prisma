// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the User model
model User {
  id            String         @id @default(uuid()) // Unique user ID
  email         String         @unique // User's email
  password      String // User's hashed password
  name          String // User's name
  role          UserRole       @default(customer)
  profile       Profile?       @relation(fields: [profileId], references: [id]) // User's profile information
  bookings      Booking[] // User's bookings
  reviews       Review[] // User's reviews
  profileId     String?
  notifications Notification[]
  feedbacks     Feedback[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  posts         Post[]

  @@map("users")
}

// Define user roles
enum UserRole {
  customer
  admin
  super_admin
}

// Define the Profile model
model Profile {
  id         String   @id @default(uuid()) // Unique profile ID
  username   String   @unique
  // Add other user profile fields (e.g., address, phone number, etc.)
  user       User[]
  bio        String?
  profileImg String?
  phoneNo    String?
  address    String?
  gender     String?
  bloodGroup String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("profiles")
}

// Define the Service model
model Service {
  id           String              @id @default(uuid()) // Unique service ID
  name         String // Service name
  description  String? // Service description
  price        Float // Service price
  category     Category            @relation(fields: [categoryId], references: [id]) // Service category
  availability ServiceAvailability
  image        String
  categoryId   String
  reviews      Review[]
  bookings     Booking[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  @@map("services")
}

enum ServiceAvailability {
  Available
  Upcoming
}

// Define the Category model
model Category {
  id        String    @id @default(uuid()) // Unique category ID
  name      String // Category name
  // Add other category-related fields if needed
  services  Service[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  posts Post[]

  @@map("categories")
}

// Define the Booking model
model Booking {
  id        String        @id @default(uuid()) // Unique booking ID
  userId    String // Foreign key to User
  serviceId String // Foreign key to Service
  status    BookingStatus @default(PENDING)
  dateTime  DateTime // Date and time of the booking
  // Add other booking-related fields if needed
  user      User          @relation(fields: [userId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  services  Service       @relation(fields: [serviceId], references: [id])

  @@map("bookings")
}

// Define booking statuses
enum BookingStatus {
  PENDING
  FIXING
  FIXED
  CANCELED
  // Add more statuses if needed
}

// Define the Review model
model Review {
  id        String   @id @default(uuid()) // Unique review ID
  userId    String // Foreign key to User
  serviceId String // Foreign key to Service
  rating    Float // Rating given by the user
  comment   String? // User's review comment
  user      User     @relation(fields: [userId], references: [id])
  services  Service  @relation(fields: [serviceId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

// Define the Administrator model - Not Done
model Administrator {
  id        String    @id @default(uuid()) // Unique admin ID
  email     String    @unique // Admin's email
  password  String // Admin's hashed password
  name      String // Admin's name
  role      AdminRole // Admin role (admin, super_admin)
  // Add other admin-related fields if needed
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("administrators")
}

// Define admin roles
enum AdminRole {
  ADMIN
  SUPER_ADMIN
}

// Notification model for user notifications (optional) - Not Done
model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  content   String // Notification content
  type      String // Notification type (e.g., 'booking', 'reminder', 'update')
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

model Post {
  id         String    @id @default(uuid())
  title      String
  content    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  author     User?     @relation(fields: [authorId], references: [id])
  authorId   String?
  categoryId String
  categories Category? @relation(fields: [categoryId], references: [id])

  @@map("posts")
}

model Feedback {
  id        String   @id @default(uuid())
  comment   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("feedbacks")
}
